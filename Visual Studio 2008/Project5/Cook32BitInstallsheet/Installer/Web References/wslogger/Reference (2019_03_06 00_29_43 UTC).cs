//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4952
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 2.0.50727.4952.
// 
#pragma warning disable 1591

namespace Installer.wslogger {
    using System.Diagnostics;
    using System.Web.Services;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System;
    using System.Xml.Serialization;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="WS_LoggerSoap", Namespace="http://ccisupportsite.net/")]
    public partial class WS_Logger : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback LoggerOperationCompleted;
        
        private System.Threading.SendOrPostCallback FindNextIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback TestdOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public WS_Logger() {
            this.Url = global::Installer.Properties.Settings.Default.Installer_wslogger_WS_Logger;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event LoggerCompletedEventHandler LoggerCompleted;
        
        /// <remarks/>
        public event FindNextIdCompletedEventHandler FindNextIdCompleted;
        
        /// <remarks/>
        public event TestdCompletedEventHandler TestdCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ccisupportsite.net/Logger", RequestNamespace="http://ccisupportsite.net/", ResponseNamespace="http://ccisupportsite.net/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string Logger(string sUnid, string sMessage, int iStatus, int iBatchid) {
            object[] results = this.Invoke("Logger", new object[] {
                        sUnid,
                        sMessage,
                        iStatus,
                        iBatchid});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void LoggerAsync(string sUnid, string sMessage, int iStatus, int iBatchid) {
            this.LoggerAsync(sUnid, sMessage, iStatus, iBatchid, null);
        }
        
        /// <remarks/>
        public void LoggerAsync(string sUnid, string sMessage, int iStatus, int iBatchid, object userState) {
            if ((this.LoggerOperationCompleted == null)) {
                this.LoggerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLoggerOperationCompleted);
            }
            this.InvokeAsync("Logger", new object[] {
                        sUnid,
                        sMessage,
                        iStatus,
                        iBatchid}, this.LoggerOperationCompleted, userState);
        }
        
        private void OnLoggerOperationCompleted(object arg) {
            if ((this.LoggerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LoggerCompleted(this, new LoggerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ccisupportsite.net/FindNextId", RequestNamespace="http://ccisupportsite.net/", ResponseNamespace="http://ccisupportsite.net/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string FindNextId(string sUnid) {
            object[] results = this.Invoke("FindNextId", new object[] {
                        sUnid});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void FindNextIdAsync(string sUnid) {
            this.FindNextIdAsync(sUnid, null);
        }
        
        /// <remarks/>
        public void FindNextIdAsync(string sUnid, object userState) {
            if ((this.FindNextIdOperationCompleted == null)) {
                this.FindNextIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFindNextIdOperationCompleted);
            }
            this.InvokeAsync("FindNextId", new object[] {
                        sUnid}, this.FindNextIdOperationCompleted, userState);
        }
        
        private void OnFindNextIdOperationCompleted(object arg) {
            if ((this.FindNextIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FindNextIdCompleted(this, new FindNextIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ccisupportsite.net/Testd", RequestNamespace="http://ccisupportsite.net/", ResponseNamespace="http://ccisupportsite.net/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public MyTest Testd(string sName, string sList) {
            object[] results = this.Invoke("Testd", new object[] {
                        sName,
                        sList});
            return ((MyTest)(results[0]));
        }
        
        /// <remarks/>
        public void TestdAsync(string sName, string sList) {
            this.TestdAsync(sName, sList, null);
        }
        
        /// <remarks/>
        public void TestdAsync(string sName, string sList, object userState) {
            if ((this.TestdOperationCompleted == null)) {
                this.TestdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTestdOperationCompleted);
            }
            this.InvokeAsync("Testd", new object[] {
                        sName,
                        sList}, this.TestdOperationCompleted, userState);
        }
        
        private void OnTestdOperationCompleted(object arg) {
            if ((this.TestdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TestdCompleted(this, new TestdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.4927")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://ccisupportsite.net/")]
    public partial class MyTest {
        
        private string nameField;
        
        private string[] testField;
        
        private string errmsgField;
        
        /// <remarks/>
        public string name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public string[] test {
            get {
                return this.testField;
            }
            set {
                this.testField = value;
            }
        }
        
        /// <remarks/>
        public string errmsg {
            get {
                return this.errmsgField;
            }
            set {
                this.errmsgField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void LoggerCompletedEventHandler(object sender, LoggerCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LoggerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LoggerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void FindNextIdCompletedEventHandler(object sender, FindNextIdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FindNextIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FindNextIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void TestdCompletedEventHandler(object sender, TestdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TestdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TestdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public MyTest Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((MyTest)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591